ext {

    applicationId = 'com.sihaixuan.component'

    isDebugs =[
       isModuleADebug: false,
       isModuleBDebug: false
   ]

    android = [
            compileSdkVersion : 28,
            minSdkVersion : 21,
            targetSdkVersion :  28
    ]

    kotlin = [
            kotlinVersion : '1.3.30',
            ktxVersion : '1.0.1',
    ]

    dependencies = [
            constraintLayoutVersion : '2.0.0-alpha4',
            coreTestingVersion : '2.0.0',
            coroutinesVersion : "1.1.1",
            espressoVersion : '3.1.0-alpha4',
            glideVersion : '4.9.0',
            gradleVersion : '3.4.0',
            gsonVersion : '2.8.2',
            junitVersion : '4.12',

            lifecycleVersion : '2.1.0-alpha04',
            materialVersion : '1.0.0',
            navigationVersion : '2.0.0',
            recyclerViewVersion : '1.1.0-alpha04',
            roomVersion : '2.1.0-alpha06',
            runnerVersion : '1.0.1',
            supportLibraryVersion : '1.1.0-alpha04',
            uiAutomatorVersion : '2.2.0',
            workVersion : '2.0.1',
            eventbus: '3.1.1',
            eventbusAnnotationProcessor:'3.1.0',
            arouter:  '1.5.0',
            arouterAnnotationProcessor:'1.2.2',

            junit:'4.12',
            androidTestRunner:'1.0.2',
            androidTestEspresso:'3.0.2',


    ]


    setDefaultConfig = { extension -> //extension android对象
        extension.compileSdkVersion = android.compileSdkVersion
        extension.defaultConfig {
            applicationId applicationId
            minSdkVersion  android.minSdkVersion
            targetSdkVersion  android.targetSdkVersion
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    }
    
    setDefaultDependecies = {extension -> //extension dependencies
        extension.implementation fileTree(dir: 'libs', include: ['*.jar'])
        extension.implementation "androidx.appcompat:appcompat:$dependencies.supportLibraryVersion"
        extension.implementation "androidx.constraintlayout:constraintlayout:$dependencies.constraintLayoutVersion"
        extension.implementation "androidx.core:core-ktx:$rootProject.kotlin.ktxVersion"
        extension.implementation "androidx.lifecycle:lifecycle-extensions:$dependencies.lifecycleVersion"
        extension.implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$dependencies.lifecycleVersion"
        extension.testImplementation "junit:junit:$dependencies.junit"

        extension.androidTestImplementation "com.android.support.test:runner:$dependencies.androidTestRunner"
//        extension.androidTestImplementation 'com.android.support.test:rules:1.0.2'
        extension.androidTestImplementation "com.android.support.test.espresso:espresso-core:$dependencies.androidTestEspresso"
    }

    setAppModuleDefaultConfig = {extension -> //extension project对象
        extension.apply plugin: 'com.android.application'
        extension.apply plugin: 'kotlin-android'
        extension.apply plugin: 'kotlin-android-extensions'
        extension.description 'this is app'
        setDefaultConfig extension.android
        setDefaultDependecies extension.dependencies

    }

    setLibModuleDefaultConfig = {extension -> //extension project对象
        extension.apply plugin: 'com.android.library'
        extension.apply plugin: 'kotlin-android'
        extension.apply plugin: 'kotlin-android-extensions'
        extension.description 'this is lib module'
        setDefaultConfig extension.android
        setDefaultDependecies extension.dependencies

    }

    //自动添加***-api依赖
    autoImportApiDependency = {extension -> //extension project对象
        def children = project.rootProject.childProjects
        //遍历所有child project
        children.each {child ->
            //判断 是否同时存在 *** module 和 ***-api module
            if(child.key.contains("-api") && children.containsKey(child.key.substring(0,child.key.length() - 4))){
                print "\n"

                def targetKey = child.key.substring(0,child.key.length() - 4)
                def targetProject = children[targetKey]

                targetProject.afterEvaluate {

                    print '*********************\n'
                    print targetProject.dependencies
                    //通过打印 所有dependencies，推断需要添加如下两个依赖
                    targetProject.dependencies.add("implementation",targetProject.dependencies.create(project(":" + child.key)))
                    targetProject.dependencies.add("implementationDependenciesMetadata",targetProject.dependencies.create(project(":" + child.key)))

                    //打印 module 添加的依赖
                    targetProject.configurations.each {configuration ->
                        print '\n---------------------------------------\n'
                        configuration.allDependencies.each { dependency ->

                            print configuration.name + "--->" +dependency.group + ":" + dependency.name + ":" + dependency.version +'\n'
                        }

                    }



                    print '*********************\n'
                }

            }


        }
    }
}